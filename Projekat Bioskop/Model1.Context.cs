//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Projekat_Bioskop
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BIOSKOPEntities : DbContext
    {
        public BIOSKOPEntities()
            : base("name=BIOSKOPEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<FILMOVI> FILMOVIs { get; set; }
        public virtual DbSet<GREŠKE> GREŠKE { get; set; }
        public virtual DbSet<KORISNICI> KORISNICIs { get; set; }
        public virtual DbSet<PRIKAZIVANJA> PRIKAZIVANJAs { get; set; }
        public virtual DbSet<RADNICI> RADNICIs { get; set; }
        public virtual DbSet<PROJEKCIJE> PROJEKCIJEs { get; set; }
        public virtual DbSet<ZAPOSLENI> ZAPOSLENIs { get; set; }
        public virtual DbSet<PRODATE_KARTE> PRODATE_KARTE { get; set; }
    
        public virtual int sp_DodajFilm(string naslov, string zanr, Nullable<short> godina_izdanja, Nullable<short> trajanje, string rezija, string scenario, string producent, string zemlja, string jezik)
        {
            var naslovParameter = naslov != null ?
                new ObjectParameter("naslov", naslov) :
                new ObjectParameter("naslov", typeof(string));
    
            var zanrParameter = zanr != null ?
                new ObjectParameter("zanr", zanr) :
                new ObjectParameter("zanr", typeof(string));
    
            var godina_izdanjaParameter = godina_izdanja.HasValue ?
                new ObjectParameter("godina_izdanja", godina_izdanja) :
                new ObjectParameter("godina_izdanja", typeof(short));
    
            var trajanjeParameter = trajanje.HasValue ?
                new ObjectParameter("trajanje", trajanje) :
                new ObjectParameter("trajanje", typeof(short));
    
            var rezijaParameter = rezija != null ?
                new ObjectParameter("rezija", rezija) :
                new ObjectParameter("rezija", typeof(string));
    
            var scenarioParameter = scenario != null ?
                new ObjectParameter("scenario", scenario) :
                new ObjectParameter("scenario", typeof(string));
    
            var producentParameter = producent != null ?
                new ObjectParameter("producent", producent) :
                new ObjectParameter("producent", typeof(string));
    
            var zemljaParameter = zemlja != null ?
                new ObjectParameter("zemlja", zemlja) :
                new ObjectParameter("zemlja", typeof(string));
    
            var jezikParameter = jezik != null ?
                new ObjectParameter("jezik", jezik) :
                new ObjectParameter("jezik", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DodajFilm", naslovParameter, zanrParameter, godina_izdanjaParameter, trajanjeParameter, rezijaParameter, scenarioParameter, producentParameter, zemljaParameter, jezikParameter);
        }
    
        public virtual int sp_DodajGresku(string opis_greske)
        {
            var opis_greskeParameter = opis_greske != null ?
                new ObjectParameter("opis_greske", opis_greske) :
                new ObjectParameter("opis_greske", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DodajGresku", opis_greskeParameter);
        }
    
        public virtual int sp_DodajKartu(Nullable<int> id_prikazivanja, string prostorija, string broj_reda, Nullable<byte> broj_sjedista, string status_sjedista, string datum, string termin)
        {
            var id_prikazivanjaParameter = id_prikazivanja.HasValue ?
                new ObjectParameter("id_prikazivanja", id_prikazivanja) :
                new ObjectParameter("id_prikazivanja", typeof(int));
    
            var prostorijaParameter = prostorija != null ?
                new ObjectParameter("prostorija", prostorija) :
                new ObjectParameter("prostorija", typeof(string));
    
            var broj_redaParameter = broj_reda != null ?
                new ObjectParameter("broj_reda", broj_reda) :
                new ObjectParameter("broj_reda", typeof(string));
    
            var broj_sjedistaParameter = broj_sjedista.HasValue ?
                new ObjectParameter("broj_sjedista", broj_sjedista) :
                new ObjectParameter("broj_sjedista", typeof(byte));
    
            var status_sjedistaParameter = status_sjedista != null ?
                new ObjectParameter("status_sjedista", status_sjedista) :
                new ObjectParameter("status_sjedista", typeof(string));
    
            var datumParameter = datum != null ?
                new ObjectParameter("datum", datum) :
                new ObjectParameter("datum", typeof(string));
    
            var terminParameter = termin != null ?
                new ObjectParameter("termin", termin) :
                new ObjectParameter("termin", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DodajKartu", id_prikazivanjaParameter, prostorijaParameter, broj_redaParameter, broj_sjedistaParameter, status_sjedistaParameter, datumParameter, terminParameter);
        }
    
        public virtual int sp_DodajKorisnika(string korisnickoIme, string lozinka, string tip)
        {
            var korisnickoImeParameter = korisnickoIme != null ?
                new ObjectParameter("korisnickoIme", korisnickoIme) :
                new ObjectParameter("korisnickoIme", typeof(string));
    
            var lozinkaParameter = lozinka != null ?
                new ObjectParameter("lozinka", lozinka) :
                new ObjectParameter("lozinka", typeof(string));
    
            var tipParameter = tip != null ?
                new ObjectParameter("tip", tip) :
                new ObjectParameter("tip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DodajKorisnika", korisnickoImeParameter, lozinkaParameter, tipParameter);
        }
    
        public virtual int sp_DodajPrikazivanje(Nullable<int> id_filma, Nullable<System.DateTime> pocetak_prikazivanja, Nullable<System.DateTime> kraj_prikazivanja, Nullable<int> status_prikazivanja)
        {
            var id_filmaParameter = id_filma.HasValue ?
                new ObjectParameter("id_filma", id_filma) :
                new ObjectParameter("id_filma", typeof(int));
    
            var pocetak_prikazivanjaParameter = pocetak_prikazivanja.HasValue ?
                new ObjectParameter("pocetak_prikazivanja", pocetak_prikazivanja) :
                new ObjectParameter("pocetak_prikazivanja", typeof(System.DateTime));
    
            var kraj_prikazivanjaParameter = kraj_prikazivanja.HasValue ?
                new ObjectParameter("kraj_prikazivanja", kraj_prikazivanja) :
                new ObjectParameter("kraj_prikazivanja", typeof(System.DateTime));
    
            var status_prikazivanjaParameter = status_prikazivanja.HasValue ?
                new ObjectParameter("status_prikazivanja", status_prikazivanja) :
                new ObjectParameter("status_prikazivanja", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DodajPrikazivanje", id_filmaParameter, pocetak_prikazivanjaParameter, kraj_prikazivanjaParameter, status_prikazivanjaParameter);
        }
    
        public virtual int sp_DodajRadnika(string ime, string prezime, Nullable<System.DateTime> datum_rodjenja, string adresa, string telefon, Nullable<System.DateTime> datum_zaposlenja, Nullable<System.DateTime> kraj_zaposlenja, Nullable<int> id_korisnika)
        {
            var imeParameter = ime != null ?
                new ObjectParameter("ime", ime) :
                new ObjectParameter("ime", typeof(string));
    
            var prezimeParameter = prezime != null ?
                new ObjectParameter("prezime", prezime) :
                new ObjectParameter("prezime", typeof(string));
    
            var datum_rodjenjaParameter = datum_rodjenja.HasValue ?
                new ObjectParameter("datum_rodjenja", datum_rodjenja) :
                new ObjectParameter("datum_rodjenja", typeof(System.DateTime));
    
            var adresaParameter = adresa != null ?
                new ObjectParameter("adresa", adresa) :
                new ObjectParameter("adresa", typeof(string));
    
            var telefonParameter = telefon != null ?
                new ObjectParameter("telefon", telefon) :
                new ObjectParameter("telefon", typeof(string));
    
            var datum_zaposlenjaParameter = datum_zaposlenja.HasValue ?
                new ObjectParameter("datum_zaposlenja", datum_zaposlenja) :
                new ObjectParameter("datum_zaposlenja", typeof(System.DateTime));
    
            var kraj_zaposlenjaParameter = kraj_zaposlenja.HasValue ?
                new ObjectParameter("kraj_zaposlenja", kraj_zaposlenja) :
                new ObjectParameter("kraj_zaposlenja", typeof(System.DateTime));
    
            var id_korisnikaParameter = id_korisnika.HasValue ?
                new ObjectParameter("id_korisnika", id_korisnika) :
                new ObjectParameter("id_korisnika", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DodajRadnika", imeParameter, prezimeParameter, datum_rodjenjaParameter, adresaParameter, telefonParameter, datum_zaposlenjaParameter, kraj_zaposlenjaParameter, id_korisnikaParameter);
        }
    
        public virtual int sp_IzbrisiGresku(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_IzbrisiGresku", idParameter);
        }
    
        public virtual int sp_UpdatePrikazivanja(Nullable<int> id, Nullable<System.DateTime> kraj_prikazivanja, Nullable<int> status_prikazivanja)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var kraj_prikazivanjaParameter = kraj_prikazivanja.HasValue ?
                new ObjectParameter("kraj_prikazivanja", kraj_prikazivanja) :
                new ObjectParameter("kraj_prikazivanja", typeof(System.DateTime));
    
            var status_prikazivanjaParameter = status_prikazivanja.HasValue ?
                new ObjectParameter("status_prikazivanja", status_prikazivanja) :
                new ObjectParameter("status_prikazivanja", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdatePrikazivanja", idParameter, kraj_prikazivanjaParameter, status_prikazivanjaParameter);
        }
    
        public virtual int sp_UpdateRadnici(Nullable<int> radnik_id, Nullable<System.DateTime> kraj_zaposlenja)
        {
            var radnik_idParameter = radnik_id.HasValue ?
                new ObjectParameter("radnik_id", radnik_id) :
                new ObjectParameter("radnik_id", typeof(int));
    
            var kraj_zaposlenjaParameter = kraj_zaposlenja.HasValue ?
                new ObjectParameter("kraj_zaposlenja", kraj_zaposlenja) :
                new ObjectParameter("kraj_zaposlenja", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateRadnici", radnik_idParameter, kraj_zaposlenjaParameter);
        }
    }
}
